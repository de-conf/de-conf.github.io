<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尘埃</title>
  
  <subtitle>尘世中漂浮的一粒沙</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.de-conf.xyz/"/>
  <updated>2019-05-02T16:59:44.965Z</updated>
  <id>http://blog.de-conf.xyz/</id>
  
  <author>
    <name>Deconf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何构建路由drcom认证</title>
    <link href="http://blog.de-conf.xyz/2019/04/openwrt-dogcom/"/>
    <id>http://blog.de-conf.xyz/2019/04/openwrt-dogcom/</id>
    <published>2019-04-12T16:24:28.000Z</published>
    <updated>2019-05-02T16:59:44.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00. 简介:"></a>0x00. 简介:</h1><ol><li>这是针对我校(西安石油)路由器认证给出的解决方案(包括ipv6 认证)<a id="more"></a></li><li>drcom程序禁止开启热点,为此有大佬逆向了drcom程序,分析出了认证数据包的关键字,并且模拟了认证数据包,程序核心是发送认证数据包维持心跳包,由于跳过了drcom程序,所以可以使得一直保持在线状态.</li><li>程序已经开源,有<a href="https://github.com/drcoms/drcom-generic" target="_blank" rel="noopener">python版本</a>,和<a href="https://github.com/mchome/dogcom" target="_blank" rel="noopener">C语言版本</a><br>本文主要记录C语言版本使用方法(python对于小容量nand flash闪存芯片就是灾难,根本放不下)<h1 id="0x01-OpenWrt"><a href="#0x01-OpenWrt" class="headerlink" title="0x01. OpenWrt"></a>0x01. OpenWrt</h1>简介:<br>OpenWrt项目是一个针对嵌入式设备的Linux操作系统。OpenWrt不是一个单一且不可更改的固件，而是提供了具有软件包管理功能的完全可写的文件系统。(划重点: Linux,可写文件系统)<h2 id="0x01-1如何使用OpenWrt"><a href="#0x01-1如何使用OpenWrt" class="headerlink" title="0x01 .1如何使用OpenWrt"></a>0x01 .1如何使用OpenWrt</h2></li><li>准备工作:<br>0.1 一个任意Linux发行版(如果你使用win,需要准备虚拟机)<br>0.2 网线,路由器</li><li>硬件基础<br>支持的设备 <a href="https://openwrt.org/zh/toh/start" target="_blank" rel="noopener">见链接</a></li><li>如何刷入<span class="label danger">高度危险</span><span class="label warning">风险提示:误操作可能导致路由器变砖</span>(<span class="label danger">无编程器可能导致报废</span>)<br>某些设备支持直接刷入(eg:linksyswrt 系列<br>某些不支持直接刷入(eg: 小米路由青春版<br>相关信息可以查阅 <code>goole 你的设备型号 openwrt</code>来判断<br>另外,<span class="label success">推荐使用OpenWrt官方固件</span><span class="label warning">注意,版本最好为Current Stable Release</span>(或自己构建),毕竟你不知道他人固件里有没有私货,还有一点就是下文中的SDK和刷入版本需要一致,不然会遇到编译出来的安装包无法安装的问题!!!<br>OpenWrt官方固件刷入<a href="https://openwrt.org/zh/toh/views/toh_fwdownload" target="_blank" rel="noopener">下载地址</a><h2 id="0x02-构建drcom安装包"><a href="#0x02-构建drcom安装包" class="headerlink" title="0x02. 构建drcom安装包"></a>0x02. 构建drcom安装包</h2></li><li>(win: 打开虚拟机,选择nat网络模式,打开你的Linux发行版 查看发现版命令 <code>lsb_release -a</code></li><li>根据自己的Linux发行版安装必要的依赖<br><a href="https://openwrt.org/docs/guide-developer/build-system/install-buildsystem#examples_of_package_installations" target="_blank" rel="noopener">参考链接</a></li><li>下载OpenWrt SDK<br>使用ssh 连接路由cat /proc/cpuinfo查看路由信息<br>根据路由选择SDK (这里以常用的mtk7620芯片举例)<br>下载地址: <a href="https://downloads.openwrt.org/" target="_blank" rel="noopener">https://downloads.openwrt.org/</a></li></ol><p>下载openwrt-sdk-18.06.1-ramips-mt7620_gcc-7.3.0_musl.Linux-x86_64.tar.xz注意是有gcc的!<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://downloads.openwrt.org/releases/18.06.2/targets/ramips/mt7620/openwrt-sdk-18.06.1-ramips-mt7620_gcc-7.3.0_musl.Linux-x86_64.tar.xz #mtk7620 SDK</span><br><span class="line">$ tar -vxf openwrt-sdk*</span><br><span class="line">$ cd openwrt-sdk*</span><br></pre></td></tr></tbody></table></figure><p></p><p>接下来拉取drcom源码<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/mchome/openwrt-dogcom.git package/openwrt-dogcom</span><br><span class="line">$ git clone https://github.com/mchome/luci-app-dogcom.git package/luci-app-dogcom</span><br></pre></td></tr></tbody></table></figure><p></p><p>接下来编译路由安装包<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make package/openwrt-dogcom/compile</span><br><span class="line">$ make package/luci-app-dogcom/compile</span><br></pre></td></tr></tbody></table></figure><p></p><p>如果没有问题,现在就已经构建好了<br>现在可以去当前目录下的bin文件夹下找到dogcom.ipk,luci-app-dogcom.ipk,之后cd进该目录/在此处打开终端</p><h2 id="0x03-安装dogcom安装包-启动认证程序"><a href="#0x03-安装dogcom安装包-启动认证程序" class="headerlink" title="0x03 安装dogcom安装包,启动认证程序"></a>0x03 安装dogcom安装包,启动认证程序</h2><ol><li><p>上传并安装dogcom软件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$scp dogcom*.ipk luci-app-dogcom*.ipk root@192.168.1.1:/rooot/</span><br><span class="line">$ ssh root@192.168.1.1</span><br><span class="line">root@OpenWrt:~# ls #查看文件是否上传成功</span><br><span class="line">root@OpenWrt:~# opkg install dogcom*.ipk luci-app-dogcom*.ipk</span><br></pre></td></tr></tbody></table></figure></li><li><p>现在可以把网线插入路由器的<code>wan</code>口了</p></li><li>修改配置文件<br>1.登录路由器<br><code>ssh root@192.168.1.1</code><br>2.修改配置文件<br><code>vim /etc/dogcom.conf</code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server = '192.168.255.249'</span><br><span class="line">username='***********'          #校园网账号</span><br><span class="line">password='***********'          #校园网密码</span><br><span class="line">CONTROLCHECKSTATUS = '\x20'</span><br><span class="line">ADAPTERNUM = '\x05'</span><br><span class="line">host_ip = '10.29.6.70'         #主机地址</span><br><span class="line">IPDOG = '\x01'</span><br><span class="line">host_name = 'boom'  </span><br><span class="line">PRIMARY_DNS = '10.200.4.1'</span><br><span class="line">dhcp_server = '10.29.6.254'    #楼层路由地址</span><br><span class="line">AUTH_VERSION = '\x0a\x00'</span><br><span class="line">mac = 0xb025aa1               #mac地址，前面加0x</span><br><span class="line">host_os = 'Windows'</span><br><span class="line">KEEP_ALIVE_VERSION = '\xdc\x02'</span><br><span class="line">ror_version = False</span><br></pre></td></tr></tbody></table></figure></li></ol><p>修改好了之后<code>:wq</code>保存退出</p><ol start="3"><li>启动drcom程序<br><code>/etc/init.d/dogcom start && /etc/init.d/dogcom enable</code></li><li>测试连通性<br>方法一: ping baidu.com<br>二: 打开 <a href="http://192.168.255.249/" target="_blank" rel="noopener">http://192.168.255.249/</a> 看是否在线<br>三: <code>ps |grep dogcom</code> #看是否有dogcom进程<h2 id="0x04-添加ipv6认证"><a href="#0x04-添加ipv6认证" class="headerlink" title="0x04 添加ipv6认证"></a>0x04 添加ipv6认证</h2>概述:由于我校新加了ipv6认证,所以ipv6访问会出现一定问题.<br>经过观察,发现访问ipv6地址时浏览器会跳转到 <a href="http://192.168.255.249,所以抓了一次包,wireshark截图如下" target="_blank" rel="noopener">http://192.168.255.249,所以抓了一次包,wireshark截图如下</a><br><img src="drcom-ipv6-auth.png" alt="ipv6-auth"><br>所以ipv6认证方式显而易见,是通过一次GET请求来实现的,模拟这一过程就好!<h3 id="依赖软件"><a href="#依赖软件" class="headerlink" title="依赖软件"></a>依赖软件</h3><code>opkg update && opkg install curl</code><br>如果遇到超时,需要换下openwrt的源<br><code>sed -i 's/downloads.openwrt.org/mirrors.ustc.edu.cn\/lede/g' /etc/opkg/distfeeds.conf</code><h3 id="ipv6-auth脚本"><a href="#ipv6-auth脚本" class="headerlink" title="ipv6-auth脚本"></a>ipv6-auth脚本</h3><code>vim /etc/ipv6-auth.sh</code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">ip6=`ip address show | grep "2001" |awk '{print $2}' |cut -d '/' -f 1`</span><br><span class="line">number=0</span><br><span class="line">while [ -z $ip6 ]; do</span><br><span class="line">    sleep 3</span><br><span class="line">    ip6=`ip address show | grep "2001" |awk '{print $2}' |cut -d '/' -f 1`</span><br><span class="line">    number ++</span><br><span class="line">    if [ $number -gt 6 ]; then</span><br><span class="line">        break;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">if [ $ip6 -z ]; then</span><br><span class="line">    echo "get ipv6 address fail" > /tmp/ipv6.log</span><br><span class="line">else</span><br><span class="line">    curl  http://192.168.255.249/1.htm?mv6=$ip6</span><br><span class="line">    echo "ipv6 auth success" > /tmp/ipv6.log</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></tbody></table></figure></li></ol><p>开机认证<br><code>/etc/rc.local</code><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /etc/ipv6-auth.sh</span><br></pre></td></tr></tbody></table></figure><p></p><p>另外ipv6认证维持时间据我观察好像是12小时<br>故还得写个定时任务<br><code>/etc/crontabs/root</code><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 */3 * * * /etc/ipv6-auth.sh #每三小时发送一次认证请求</span><br></pre></td></tr></tbody></table></figure><p></p><p>重启路由器<br>测试 <code>ping ipv6.google.com</code><br>但是这个时候只是路由器ipv6连通了,下面的设备ipv6依旧不通,鉴于认证方式基于ipv6地址,故无法采用<code>ipv6 relay</code>,<code>ipv6 passthrougth</code>技术,可选的只有<code>ipv6 nat</code></p><h3 id="0x05-ipv6-NAT"><a href="#0x05-ipv6-NAT" class="headerlink" title="0x05 ipv6 NAT"></a>0x05 ipv6 NAT</h3><p>这部分参考了清华大学的openwrt ipv6讨论<br><a href="https://github.com/tuna/ipv6.tsinghua.edu.cn/blob/master/openwrt.md" target="_blank" rel="noopener">见地址</a>推荐阅读</p><ol><li>安装需求包<br><code>opkg install ip6tables kmod-ipt-nat6 kmod-ip6tables kmod-ip6tables-extra luci-proto-ipv6 iputils-traceroute6</code></li><li><p>开启默认通告</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uci set dhcp.lan.ra_default='1'</span><br><span class="line">uci commit dhcp</span><br></pre></td></tr></tbody></table></figure></li><li><p>加入nat6的路由表<br>在<code>/etc/firewall.user</code>加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WAN6=eth0</span><br><span class="line">LAN=br-lan</span><br><span class="line">ip6tables -t nat -A POSTROUTING -o $WAN6 -j MASQUERADE</span><br><span class="line">ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">ip6tables -A FORWARD -i $LAN -j ACCEPT</span><br></pre></td></tr></tbody></table></figure></li></ol><p>WAN6和LAN分别改成外网IPv6和内网网卡(interface)的名字，注意不是防火墙区域(zone)的名字，也不是LuCI里面Network->Interfaces里面看到的名字，而是ifconfig看到的名字</p><ol start="4"><li>默认网关设置<br>添加<code>/etc/hotplug.d/iface/99-ipv6</code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">[ "$ACTION" = ifup ] || exit 0</span><br><span class="line">iface=wan6</span><br><span class="line">[ -z "$iface" -o "$INTERFACE" = "$iface" ] || exit 0</span><br><span class="line">ip -6 route add `ip -6 route show default|sed -e 's/from [^ ]* //'`</span><br><span class="line">logger -t IPv6 "Add IPv6 default route."</span><br></pre></td></tr></tbody></table></figure></li></ol><p>记得加可执行权限<br><code>chmod +x /etc/hotplug.d/iface/99-ipv6</code></p><ol start="5"><li>重启,收工<br>如果没特殊情况,现在你的路由器可以下发ipv6地址了,并且ipv6可以连通了,但是针对某些网站(npupt.com)访问依旧会出现问题,这是由于ipv6 nat下发的是私有ipv6地址,经过转换之后出去的.所以浏览器默认你没有公网ipv6,导致couldflare防火墙认为你没有ipv6地址造成的.暂无解决办法(已解决,见下文)</li><li>浏览器ipv6问题<br>经过朋友提醒,浏览器有一个特性,它不认 <code>fd</code>开头<br>的ipv6地址,它认为你拿的是私有地址,所以浏览页面一直使用ipv4,也就造成npupt.com等只允许ipv6的网站上不去,所以把fd开头改成dd开头就好了!<br>#修改ipv6前缀 (修改ula_prefix那一行)<br><code>vim /etc/config/network</code> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config globals 'globals'</span><br><span class="line">        option ula_prefix 'dd86:acf7:b93b::/48'</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06. 后记"></a>0x06. 后记</h2><p>个人文章,难免有错误,欢迎各位留言和指正!<br>当然如果你按照此文配置遇到了问题,欢迎留言,我会尽力帮助!233<br>完结了!!!</p><span class="label danger">FBI Warning</span><span class="label warning"> 本文仅限于研究,不得用于商业用途!!!负责后果自负!!!</span><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00. 简介:&quot;&gt;&lt;/a&gt;0x00. 简介:&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;这是针对我校(西安石油)路由器认证给出的解决方案(包括ipv6 认证)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rebuild Blog</title>
    <link href="http://blog.de-conf.xyz/2019/02/rebuild/"/>
    <id>http://blog.de-conf.xyz/2019/02/rebuild/</id>
    <published>2019-02-25T15:30:14.000Z</published>
    <updated>2019-04-02T15:58:28.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从头开始"><a href="#从头开始" class="headerlink" title="从头开始"></a>从头开始</h1><p>非常悲催,由于一次误操作,导致了我的Blog源文件丢失.然后由于本人懒散 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8">😀</span> ,一直拖到现在才重建Blog. </p><a id="more"></a><h1 id="新科技"><a href="#新科技" class="headerlink" title="新科技"></a>新科技</h1><ol><li>为了上次经验教训采用了github保存blog源文件</li><li>采用了 Travis-CI 自动化部署 (<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8">😏</span>)</li></ol><h1 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h1><p>tarvis-ci服务器不断地监听blog主线开发的变更内容， 一旦有任何变更（可以理解为 git commit ）就自动调用测试和部署脚本。然后我的blog就自动更新了.<br>(好处就是可以直接在github web页面写文章了,而且也不需要担心多设备同步问题.2333 黑科技不? <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;从头开始&quot;&gt;&lt;a href=&quot;#从头开始&quot; class=&quot;headerlink&quot; title=&quot;从头开始&quot;&gt;&lt;/a&gt;从头开始&lt;/h1&gt;&lt;p&gt;非常悲催,由于一次误操作,导致了我的Blog源文件丢失.然后由于本人懒散 &lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8&quot;&gt;😀&lt;/span&gt; ,一直拖到现在才重建Blog. &lt;/p&gt;
    
    </summary>
    
      <category term="hexo blog" scheme="http://blog.de-conf.xyz/categories/hexo-blog/"/>
    
    
      <category term="blog" scheme="http://blog.de-conf.xyz/tags/blog/"/>
    
  </entry>
  
</feed>
